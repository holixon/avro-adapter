{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":""},{"location":"index.html#what-is-it","title":"What is it?","text":"<p>Avro Registry Adapter is a small library that fosters the use of Apache Avro for serialization and deserialization using an external registry. In order to be independent of registry implementations, we provide a Java API for the registry. In addition, several implementations of this API is shipped by this library.</p>"},{"location":"schema-registry-api.html","title":"Schema Registry API","text":"<p>The schema registry API consists of two main interfaces:</p> <ul> <li><code>AvroSchemaReadOnlyRegistry</code> is used to read retrieve schema information</li> <li><code>AvroSchemaRegistry</code> is used to register new schema</li> </ul> <pre><code> /**\n  * The Schema Registry is responsible for retrieving arvo schema files.\n  */\n  interface AvroSchemaReadOnlyRegistry {\n  /**\n   * Finds a stored [Schema] based on its unique [AvroSchemaId] (e.g. its fingerprint).\n   */\n   fun findById(schemaId: AvroSchemaId): Optional&lt;AvroSchemaWithId&gt;\n\n  /**\n   * Finds a stored [Schema] based on its derived info.\n   */\n   fun findByInfo(info: AvroSchemaInfo): Optional&lt;AvroSchemaWithId&gt;\n\n  /**\n   * Finds all stored [Schema]s based on their namespaces and names (e.g. FQN).\n   */\n   fun findAllByCanonicalName(namespace: String, name: String): List&lt;AvroSchemaWithId&gt;\n\n  /**\n   * Simply lists all stored [Schema]s.\n   */\n   fun findAll(): List&lt;AvroSchemaWithId&gt;\n  }\n</code></pre> <pre><code> /**\n  * The Schema Registry is responsible for storing and retrieving arvo schema files.\n  */\n  interface AvroSchemaRegistry : AvroSchemaReadOnlyRegistry {\n\n  /**\n   * Stores a new [Schema] (version) in the repository.\n   */\n   fun register(schema: Schema): AvroSchemaWithId\n  }\n</code></pre>"},{"location":"adapter/index.html","title":"Registry Adapter Overview","text":"<p>The following adapters, implementing the API are provided by this extension:</p> <ul> <li>In-Memory</li> <li>Reflective</li> <li>JPA</li> <li>Axon</li> <li>Composite</li> </ul>"},{"location":"adapter/axon.html","title":"Axon Framework Registry Adapter","text":"<p>The Axon Registry Adapter uses Axon-Framework implementing the Registry Adapter API. By doing so, it  provides a schema aggregate, which uses Event Sourcing for persistence. If Axon Server is already in use, no other event store is required, but if not yet configured, any other event store will do as well (Mongo, JPA, JDBC). </p> <p>This implementation is motivated by the scenario of use of Avro Serializer for Axon event serialization. By doing so, the registry doesn't need any further persistent implementation besides the one already provided  by the Axon Server.</p>"},{"location":"adapter/composite.html","title":"Composite Registry Adapter","text":"<p>This adapter provides a way to combine several schema registry adapters in a chain. By doing so, it utilizes one read/write schema registry and a list of read-only registries.</p> <p>Always consider using the composite registry adapter, to boost your performance to a slow (remote) registry adapter by including an in-memory registry adapter as a cache in front of it.</p>"},{"location":"adapter/in-memory.html","title":"In-Memory Registry Adapter","text":"<p>The read/write in-memory implementation of the adapter, backed by a simple hashmap, holding the schema information in memory. The implementation has no persistence and will lose all schema information on the restart of the JVM.</p> <p>Consider usage of the in-memory adapter as a cache to other adapter using the Composite registry adapter. </p>"},{"location":"adapter/jpa.html","title":"Spring Data JPA Registry Adapter","text":"<p>Spring Data JPA Registry Adapter provides a Spring Data JPA implementation of the registry adapter API using  a RDBMS to store the schema information.</p>"},{"location":"adapter/reflective.html","title":"Reflective Registry Adapter","text":"<p>A reflective registry adapter is used to find all schemas available in the classes on the classpath and initialize an in-memory read-only with them. By doing so, the scan is executed only once, since the classpath is assumed unchanged during the runtime of the application. </p> <p>This adapter is helpful in scenarios where generated Avro Java classes are present on the classpath and all the underlying schemas should be added to a registry.</p>"}]}